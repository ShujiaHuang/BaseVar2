/*
 *  The main program of BaseVar.
 *
 *  Created on: Jul 30, 2018
 *      Author: Shujia Huang
 * 
 */
#include <iostream>
#include <getopt.h>
#include <ctime>

#include "version.h"
// #include "variant_caller.h"
#include "variant_caller_batchfree.h"
#include "vcf_subset_samples.h"
#include "concat.h"

static int usage() {
    // Usage discription
    std::cout << 
        "Program: basevar (Variant calling and allele frequency estimation from ultra low-pass WGS data)\n\n"
        "Version: " << BASEVAR_VERSION << "\n"
        "Author:  " << BASEVAR_AUTHOR  << "\n\n"
        "Usage: basevar <command> [options]\n\n" 
        "Commands:\n"
        "  caller    Variants Caller\n"
        "  concat    Concatenate VCF files from the same set of samples generated by BaseVar.\n"
        "  subsam    Extract variants for specified samples from VCF file and output a new VCF file.\n"
        << "\n" << std::endl;

    return EXIT_SUCCESS;
}

// call variant
int basetype(int argc, char *argv[]) {
    BaseTypeRunner bt(argc, argv);
    return bt.run();
}

// Merge VCF/CVG files to a final big one
int concat(int argc, char *argv[]) {
    return concat_runner(argc, argv);
}

int main(int argc, char *argv[]) {
    clock_t cpu_start_time = clock();
    time_t real_start_time = time(0);
    
    if (argc < 2) {
        return usage();
    }

    time_t now = time(0);
    std::cout << "Program start on " << ctime(&now) << "\n";

    int run_stat;
    std::string cmd(argv[1]);
    if (cmd == "caller") {
        run_stat = basetype(argc-1, argv+1);
    
    } else if (cmd == "concat") {
        run_stat = concat(argc-1, argv+1);

    } else if (cmd == "subsam") {
        try {
            // For subsampling, we need at least 3 arguments: input file, output file, 
            // and at least one sample name.
            VCFSubsetSamples subsam(argc-1, argv+1);
            run_stat = subsam.run();

        } catch (const std::exception& e) {
            std::cerr << "Error: " << e.what() << '\n';
            return 1;
        }
    
    } else if (cmd == "-h" || cmd == "--help") {

        return usage();
    } else {
        
        std::cout << "Error: Unrecognizable option: " + cmd << std::endl;
        return EXIT_FAILURE;
    }

    now = time(0);
    std::string ct(ctime(&now));
    ct.pop_back();  // rm the trailing '\n' put by `asctime`
    std::cout << "\n** " + ct + ". Processes are all done, "
              << difftime(now, real_start_time) << " (CPU time: "
              << (double)(clock() - cpu_start_time) / CLOCKS_PER_SEC 
              << ") seconds elapsed in total. **\n" << std::endl;

    return run_stat;
}
